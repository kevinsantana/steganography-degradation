package steganographyRS;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

public class Main {
	/**
	 * Implements the reversible degradation, with reed-solomon and nfc encoded: the
	 * absolute path of the file that has been encoded and degradeted redundancy:
	 * the error correction bytes generated by the encoder process hash: the
	 * absolute path of the file matching the hash generated by the card that
	 * encoded the file
	 * 
	 * @param args main to execute the code, has a self implementation for static
	 *             methods
	 * @throws NoSuchAlgorithmException default sha256 exception
	 * @throws IOException              if for any reason the data to be degradeted
	 *                                  it's unavailable in the disk
	 * @throws ReedSolomonException     exception to handle the error correction
	 *                                  code
	 * @throws CardException            pc card reader default exception, if for any
	 *                                  reason there is no card in the reader or if
	 *                                  the reader itself is unavailable
	 */

	public static void main(String[] args) throws NoSuchAlgorithmException, IOException, ReedSolomonException {

		ReversibleDegradation degradation = new ReversibleDegradation();
		int degradationPercent = 20;
		String absolutePath = "F:\\sbrt2019port-V2.pdf";
		String arquivo = "F:\\Decoy.jpg";
		String encoded = "F:\\sbrt2019port-V2_Encoded.pdf";
		String redundancy = "F:\\sbrt2019port-V2_Redundancy.pdf";

		// Encoder
		degradation.encoder(absolutePath, arquivo, degradationPercent);

		// Decoder
		// degradation.decoder(absolutePath, encoded, redundancy, degradationPercent);

	}

}
